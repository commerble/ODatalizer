<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.OData.Edm" #>
<#@ import namespace="ODatalizer.EFCore.Extensions" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.OData;
using Microsoft.AspNetCore.OData.Extensions;
using Microsoft.AspNetCore.OData.Routing;
using Microsoft.AspNetCore.OData.Routing.Controllers;
using Microsoft.AspNetCore.OData.Query;
using Microsoft.AspNetCore.OData.Deltas;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.OData.Edm;
using Microsoft.OData.UriParser;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ODatalizer.EFCore;

namespace <#= Namespace #>
{
<# 
    foreach(var entitySet in EdmModel.EntityContainer.EntitySets()) {
        var entitySetName = entitySet.Name;
        var keys = entitySet.EntityType().DeclaredKey;
        var controllerName = entitySetName + "Controller";
        var entityName = entitySet.EntityType().FullTypeName();
        var keysTypeNameComma = keys.Select(key => Type(entityName, key.Name) + " " + key.Name + "0").Join(", ");
        var keysNameComma = keys.Select(key => key.Name + "0").Join(", ");
        var keysNameBraceComma = keys.Select(key => "{" + key.Name + "0" + "}").Join(",");
        var keysNameCondition = "o => " + keys.Select(key => "o." + key.Name + " == " + key.Name + "0").Join(" && ");
        
#>
    public partial class <#= controllerName #> : ODataController
    {
        private const string RouteName = <#= RouteNameValue #>;
        private readonly <#= DbContextTypeName #> _db;
        private readonly ILogger<<#= controllerName #>> _logger;
        private readonly IAuthorizationService _authorization;

        public <#= controllerName #>(<#= DbContextTypeName #> db, ILogger<<#= controllerName #>> logger, IAuthorizationService authorization)
        {
            _db = db;
            _logger = logger;
            _authorization = authorization;
        }

        [EnableQuery(PageSize = <#= PageSize #>, MaxExpansionDepth = <#= MaxExpansionDepth #>)]
        [HttpGet("/<#= RoutePrefix #><#= entitySetName #>")]
        <# if(Authorize) { #>
        public async Task<IActionResult> Get()
        {
            var resource = new ODatalizerAuthorizationInfo
            {
                AccessedResources = {
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= entityName #>"
                    }
                }
            };

            Request.AddAuthorizationInfoFromSelectExpandClause(resource);

            var authorizationResult = await _authorization.AuthorizeAsync(User, resource, "Read");

            if (!authorizationResult.Succeeded)
            {
                if (User.Identity.IsAuthenticated)
                    return Forbid();
                else
                    return Unauthorized();
            }
        <# } else  {#>
        public IActionResult Get()
        {
        <# } #>
            return Ok(_db.<#= entitySetName #>);
        }

        [HttpPost("/<#= RoutePrefix #><#= entitySetName #>")]
        public async Task<IActionResult> Post([FromBody]<#= entityName #> entity)
        {
        <# if(Authorize) { #>
            var resource = new ODatalizerAuthorizationInfo
            {
                AccessedResources = {
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= entityName #>"
                    }
                }
            };
            var authorizationResult = await _authorization.AuthorizeAsync(User, resource, "Write");

            if (!authorizationResult.Succeeded)
            {
                if (User.Identity.IsAuthenticated)
                    return Forbid();
                else
                    return Unauthorized();
            }
        <# } #>
            if (!ModelState.IsValid)
                return BadRequest(this.CreateSerializableErrorFromModelState());

            _db.<#= entitySetName #>.Add(entity);

            await _db.SaveChangesAsync();
            
            return Created(entity);
        }

        [EnableQuery(PageSize = <#= PageSize #>, MaxExpansionDepth = <#= MaxExpansionDepth #>)]
        [HttpGet("/<#= RoutePrefix #><#= entitySetName #>(<#= keysNameBraceComma #>)")]
        public async Task<IActionResult> GetOne(<#= keysTypeNameComma #>)
        {
        <# if(Authorize) { #>
            var resource = new ODatalizerAuthorizationInfo
            {
                AccessedResources = {
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= entityName #>"
                    }
                }
            };
            
            Request.AddAuthorizationInfoFromSelectExpandClause(resource);

            var authorizationResult = await _authorization.AuthorizeAsync(User, resource, "Read");

            if (!authorizationResult.Succeeded)
            {
                if (User.Identity.IsAuthenticated)
                    return Forbid();
                else
                    return Unauthorized();
            }
        <# } #>
            var entity = await _db.<#= entitySetName #>.FirstOrDefaultAsync(<#= keysNameCondition #>);

            if (entity == null)
                return NotFound();

            return Ok(entity);
        }

        <# foreach(var (pKeys, i) in GetPermutation(keys).Select((pKeys, i) => (pKeys, i))) { #>
        [EnableQuery(PageSize = <#= PageSize #>, MaxExpansionDepth = <#= MaxExpansionDepth #>)]
        [HttpGet("/<#= RoutePrefix #><#= entitySetName #>(<#= pKeys.Select(k => k.Name + "={" + k.Name + "0}").Join(",") #>)")]
        public Task<IActionResult> GetOne<#=i#>(<#= keysTypeNameComma #>)
            => GetOne(<#= keysNameComma #>);
        <# } #>
        
        <# foreach(var (pKeys, i) in GetPermutation(keys).Select((pKeys, i) => (pKeys, i))) { #>
        [HttpPut("/<#= RoutePrefix #><#= entitySetName #>(<#= pKeys.Select(k => k.Name + "={" + k.Name + "0}").Join(",") #>)")]
        public Task<IActionResult> Put<#=i#>(<#= keysTypeNameComma #>, [FromBody]<#= entityName #> entity)
            => Put(<#= keysNameComma #>, entity);
        <# } #>

        [HttpPut("/<#= RoutePrefix #><#= entitySetName #>(<#= keysNameBraceComma #>)")]
        public async Task<IActionResult> Put(<#= keysTypeNameComma #>, [FromBody]<#= entityName #> entity)
        {
        <# if(Authorize) { #>
            var resource = new ODatalizerAuthorizationInfo
            {
                AccessedResources = {
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= entityName #>"
                    }
                }
            };
            var authorizationResult = await _authorization.AuthorizeAsync(User, resource, "Write");

            if (!authorizationResult.Succeeded)
            {
                if (User.Identity.IsAuthenticated)
                    return Forbid();
                else
                    return Unauthorized();
            }
        <# } #>
            if (<#= keys.Select(key => key.Name + "0" + " != entity." + key.Name).Join(" || ") #>)
                return BadRequest();
        
            if (!ModelState.IsValid)
                return BadRequest(this.CreateSerializableErrorFromModelState());

            var original = await _db.<#= entitySetName #>.FirstOrDefaultAsync(<#= keysNameCondition #>);

            if (original == null)
                return NotFound();

            _db.Entry(original).State = EntityState.Detached;

            var entry = _db.Entry(entity);

            entry.State = EntityState.Modified;

            await _db.SaveChangesAsync();

            return NoContent();
        }

        <# foreach(var (pKeys, i) in GetPermutation(keys).Select((pKeys, i) => (pKeys, i))) { #>
        [HttpPatch("/<#= RoutePrefix #><#= entitySetName #>(<#= pKeys.Select(k => k.Name + "={" + k.Name + "0}").Join(",") #>)")]
        public Task<IActionResult> Patch<#=i#>(<#= keysTypeNameComma #>, [FromBody]Delta<<#= entityName #>> delta)
            => Patch(<#= keysNameComma #>, delta);
        <# } #>

        [HttpPatch("/<#= RoutePrefix #><#= entitySetName #>(<#= keysNameBraceComma #>)")]
        public async Task<IActionResult> Patch(<#= keysTypeNameComma #>, [FromBody]Delta<<#= entityName #>> delta)
        {
        <# if(Authorize) { #>
            var resource = new ODatalizerAuthorizationInfo
            {
                AccessedResources = {
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= entityName #>"
                    }
                }
            };
            resource.BindProps(delta.GetChangedPropertyNames());
            var authorizationResult = await _authorization.AuthorizeAsync(User, resource, "Write");

            if (!authorizationResult.Succeeded)
            {
                if (User.Identity.IsAuthenticated)
                    return Forbid();
                else
                    return Unauthorized();
            }
        <# } #>
            var original = await _db.<#= entitySetName #>.FirstOrDefaultAsync(<#= keysNameCondition #>);

            if (original == null)
                return NotFound();

            delta.Patch(original);

            await _db.SaveChangesAsync();

            return NoContent();
        }

        <# foreach(var (pKeys, i) in GetPermutation(keys).Select((pKeys, i) => (pKeys, i))) { #>
        [HttpDelete("/<#= RoutePrefix #><#= entitySetName #>(<#= pKeys.Select(k => k.Name + "={" + k.Name + "0}").Join(",") #>)")]
        public Task<IActionResult> Delete<#=i#>(<#= keysTypeNameComma #>)
            => Delete(<#= keysNameComma #>);
        <# } #>

        [HttpDelete("/<#= RoutePrefix #><#= entitySetName #>(<#= keysNameBraceComma #>)")]
        public async Task<IActionResult> Delete(<#= keysTypeNameComma #>)
        {
        <# if(Authorize) { #>
            var resource = new ODatalizerAuthorizationInfo
            {
                AccessedResources = {
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= entityName #>"
                    }
                }
            };
            var authorizationResult = await _authorization.AuthorizeAsync(User, resource, "Write");

            if (!authorizationResult.Succeeded)
            {
                if (User.Identity.IsAuthenticated)
                    return Forbid();
                else
                    return Unauthorized();
            }
        <# } #>
            var entity = await _db.<#= entitySetName #>.FirstOrDefaultAsync(<#= keysNameCondition #>);

            if (entity == null)
                return NotFound();

            _db.<#= entitySetName #>.Remove(entity);

            await _db.SaveChangesAsync();

            return NoContent();
        }

    <#
        var suffix = 1;
        foreach(var bind in entitySet.NavigationPropertyBindings.Where(n => IsSkipNavigation(n)))
        {
            var nav = bind.NavigationProperty;
            var navEntityType = nav.ToEntityType();
            var navKeys = navEntityType.DeclaredKey;

            var navEntityName = navEntityType.FullTypeName();
            var navName = nav.Name;
            var navKeysTypeNameComma = navKeys.Select(key => Type(key.Type) + " " + key.Name + suffix).Join(", ");
            var navKeysNameComma = navKeys.Select(key => key.Name + suffix).Join(", ");
            var navKeysNameBraceComma1 = navKeys.Select(key => "{" + key.Name + suffix + "}").Join(", ");
            var navKeysNameBraceComma2 = navKeys.Select(key => key.Name + "={" + key.Name + suffix + "}").Join(", ");
            var navKeysNameCondition = "o => " + navKeys.Select(key => "o." + key.Name + " == " + key.Name + suffix).Join(" && ");
    #>

        <# foreach(var (pKeys, i) in GetPermutation(keys).Select((pKeys, i) => (pKeys, i))) { #>
        [EnableQueryRef(PageSize = <#= PageSize #>)]
        [HttpGet("/<#= RoutePrefix #><#= entitySetName #>(<#= pKeys.Select(k => k.Name + "={" + k.Name + "0}").Join(",") #>)/<#= navName #>/$ref")]
        public Task<IActionResult> Get<#= navName #>Ref<#=i#>(<#= keysTypeNameComma #>)
            => Get<#= navName #>Ref(<#= keysNameComma #>);
        <# } #>

        [EnableQueryRef(PageSize = <#= PageSize #>)]
        [HttpGet("/<#= RoutePrefix #><#= entitySetName #>(<#= keysNameBraceComma #>)/<#= navName #>/$ref")]
        public async Task<IActionResult> Get<#= navName #>Ref(<#= keysTypeNameComma #>)
        {
        <# if(Authorize) { #>
            var resource = new ODatalizerAuthorizationInfo
            {
                AccessedResources = {
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= entityName #>"
                    },
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= navEntityName #>"
                    }
                }
            };

            Request.AddAuthorizationInfoFromSelectExpandClause(resource);

            var authorizationResult = await _authorization.AuthorizeAsync(User, resource, "Read");

            if (!authorizationResult.Succeeded)
            {
                if (User.Identity.IsAuthenticated)
                    return Forbid();
                else
                    return Unauthorized();
            }
        <# } #>
            var entity = await _db.<#= entitySetName #>.FirstOrDefaultAsync(<#= keysNameCondition #>);

            if (entity == null)
                return NotFound();

            return Ok(entity.<#= navName #>);
        }

        <# foreach(var (pKeys, i) in GetPermutation(keys).Select((pKeys, i) => (pKeys, i))) { #>
        [HttpPost("/<#= RoutePrefix #><#= entitySetName #>(<#= pKeys.Select(k => k.Name + "={" + k.Name + "0}").Join(",") #>)/<#= navName #>/$ref")]
        public Task<IActionResult> Post<#= navName #>Ref<#=i#>(<#= keysTypeNameComma #>, [FromBody]Uri uri)
            => Post<#= navName #>Ref(<#= keysNameComma #>, uri);
        <# } #>

        [HttpPost("/<#= RoutePrefix #><#= entitySetName #>(<#= keysNameBraceComma #>)/<#= navName #>/$ref")]
        public async Task<IActionResult> Post<#= navName #>Ref(<#= keysTypeNameComma #>, [FromBody]Uri uri)
        {
        <# if(Authorize) { #>
            var resource = new ODatalizerAuthorizationInfo
            {
                AccessedResources = {
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= entityName #>"
                    },
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= navEntityName #>"
                    }
                }
            };
            var authorizationResult = await _authorization.AuthorizeAsync(User, resource, "Write");

            if (!authorizationResult.Succeeded)
            {
                if (User.Identity.IsAuthenticated)
                    return Forbid();
                else
                    return Unauthorized();
            }
        <# } #>
            var keys = Request.GetKeysFromUri(uri);
            var key = keys.FirstOrDefault();

            if (key == null)
                return BadRequest(this.CreateSerializableErrorFromModelState());

            var entity = await _db.Set<<#= navEntityName #>>().FirstOrDefaultAsync(<#= "o => " + string.Join(" && ", navKeys.Select(key => "o." + key.Name + " == (" + Type(key.Type) + ")key[\"" + key.Name + "\"]")) #>);

            if (entity == null)
                return NotFound();

            var root = await _db.<#= entitySetName #>.FirstOrDefaultAsync(<#= keysNameCondition #>);

            if (root == null)
                return NotFound();

            root.<#= navName #>.Add(entity);

            await _db.SaveChangesAsync();

            return Ok();
        }

        <# foreach(var (pKeys, i) in GetPermutation(keys).Select((pKeys, i) => (pKeys, i))) { #>
        <# foreach(var (nKeys, j) in GetPermutation(navKeys).Select((nKeys, j) => (nKeys, j))) { #>
        [HttpDelete("/<#= RoutePrefix #><#= entitySetName #>(<#= pKeys.Select(k => k.Name + "={" + k.Name + "0}").Join(",") #>)/<#= navName #>(<#= nKeys.Select(k => k.Name + "={" + k.Name + "1}").Join(",") #>)/$ref")]
        public Task<IActionResult> Delete<#= navName #>Ref<#=i#>x<#=j#>(<#= keysTypeNameComma #>, <#= navKeysTypeNameComma #>)
            => Delete<#= navName #>Ref(<#= keysNameComma #>, <#= navKeysNameComma #>);
        <# } #>
        <# } #>

        [HttpDelete("/<#= RoutePrefix #><#= entitySetName #>(<#= keysNameBraceComma #>)/<#= navName #>(<#= navKeysNameBraceComma1 #>)/$ref")]
        public async Task<IActionResult> Delete<#= navName #>Ref(<#= keysTypeNameComma #>, <#= navKeysTypeNameComma #>)
        {
        <# if(Authorize) { #>
            var resource = new ODatalizerAuthorizationInfo
            {
                AccessedResources = {
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= entityName #>"
                    },
                    new ODatalizerAccessedResource
                    {
                        Name = "<#= navEntityName #>"
                    }
                }
            };
            var authorizationResult = await _authorization.AuthorizeAsync(User, resource, "Write");

            if (!authorizationResult.Succeeded)
            {
                if (User.Identity.IsAuthenticated)
                    return Forbid();
                else
                    return Unauthorized();
            }
        <# } #>
            var root = await _db.<#= entitySetName #>.FirstOrDefaultAsync(<#= keysNameCondition #>);

            if (root == null)
                return NotFound();

            var entity = root.<#= navName #>.Where(<#= navKeysNameCondition #>).FirstOrDefault();

            if (entity == null)
                return NotFound();

            root.<#= navName #>.Remove(entity);

            await _db.SaveChangesAsync();

            return NoContent();
        }
    <#  } #>
    }
<# } #>
}