<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.OData.Edm" #>
<#@ import namespace="ODatalizer.Extensions" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNet.OData;
using Microsoft.AspNet.OData.Extensions;
using Microsoft.AspNet.OData.Routing;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.OData.Edm;
using Microsoft.OData.UriParser;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace <#= Namespace #>
{
<# 
    foreach(var entitySet in EdmModel.EntityContainer.EntitySets()) {
        var entitySetName = entitySet.Name;
        var keys = entitySet.EntityType().DeclaredKey;
        var controllerName = entitySetName + "Controller";
        var entityName = entitySet.EntityType().FullTypeName();
        var keysTypeNameComma = keys.Select(key => Type(key.Type) + " " + key.Name + "0").Join(", ");
        var keysNameComma = keys.Select(key => key.Name + "0").Join(", ");
        var keysNameBraceComma = keys.Select(key => "{" + key.Name + "0" + "}").Join(", ");
        var keysNameCondition = "o => " + keys.Select(key => "o." + key.Name + " == " + key.Name + "0").Join(" && ");
#>
    public partial class <#= controllerName #> : ODataController
    {
        private const string RouteName = <#= RouteNameValue #>;
        private readonly <#= DbContextTypeName #> _db;
        private readonly ILogger<<#= controllerName #>> _logger;
        public <#= controllerName #>(<#= DbContextTypeName #> db, ILogger<<#= controllerName #>> logger)
        {
            _db = db;
            _logger = logger;
        }

        [EnableQuery]
        [ODataRoute("<#= entitySetName #>", RouteName = RouteName)]
        public IActionResult Get()
        {
            return Ok(_db.<#= entitySetName #>);
        }

        [EnableQuery]
        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)", RouteName = RouteName)]
        public async Task<IActionResult> GetOne(<#= keysTypeNameComma #>)
        {
            var entity = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (entity == null)
                return NotFound();

            return Ok(entity);
        }

        [ODataRoute("<#= entitySetName #>", RouteName = RouteName)]
        public async Task<IActionResult> Post([FromBody]<#= entityName #> entity)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            _db.<#= entitySetName #>.Add(entity);

            await _db.SaveChangesAsync();
            
            return Created(entity);
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)", RouteName = RouteName)]
        public async Task<IActionResult> Put(<#= keysTypeNameComma #>, [FromBody]<#= entityName #> entity)
        {
            if (<#= keys.Select(key => key.Name + "0" + " != entity." + key.Name).Join(" || ") #>)
                return BadRequest();
        
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var original = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (original == null)
                return NotFound();

            _db.Entry(original).State = EntityState.Detached;

            var entry = _db.Entry(entity);

            entry.State = EntityState.Modified;

            await _db.SaveChangesAsync();

            return NoContent();
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)", RouteName = RouteName)]
        public async Task<IActionResult> Patch(<#= keysTypeNameComma #>, [FromBody]Delta<<#= entityName #>> delta)
        {
            var original = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (original == null)
                return NotFound();

            delta.Patch(original);

            await _db.SaveChangesAsync();

            return NoContent();
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)", RouteName = RouteName)]
        public async Task<IActionResult> Delete(<#= keysTypeNameComma #>)
        {
            var entity = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (entity == null)
                return NotFound();

            _db.<#= entitySetName #>.Remove(entity);

            await _db.SaveChangesAsync();

            return NoContent();
        }

    <#
        var suffix = 1;
        foreach(var bind in entitySet.NavigationPropertyBindings.Where(n => IsSkipNavigation(n)))
        {
            var nav = bind.NavigationProperty;
            var navEntityType = nav.ToEntityType();
            var navKeys = navEntityType.DeclaredKey;

            var navEntityName = navEntityType.FullTypeName();
            var navName = nav.Name;
            var navKeysTypeNameComma = navKeys.Select(key => Type(key.Type) + " " + key.Name + suffix).Join(", ");
            var navKeysNameComma = navKeys.Select(key => key.Name + suffix).Join(", ");
            var navKeysNameBraceComma = navKeys.Select(key => "{" + key.Name + suffix + "}").Join(", ");
            var navKeysNameCondition = "o => " + navKeys.Select(key => "o." + key.Name + " == " + key.Name + suffix).Join(" && ");
    #>
        [EnableQueryRef]
        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= navName #>/$ref", RouteName = RouteName)]
        public async Task<IActionResult> Get<#= navName #>Ref(<#= keysTypeNameComma #>)
        {
            var entity = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (entity == null)
                return NotFound();

            return Ok(entity.<#= navName #>);
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= navName #>/$ref", RouteName = RouteName)]
        public async Task<IActionResult> Post<#= navName #>Ref(<#= keysTypeNameComma #>, [FromBody]Uri uri)
        {
            var keys = Request.GetKeysFromUri(uri);
            var key = keys.FirstOrDefault();

            if (key == null)
                return BadRequest(ModelState);

            var entity = await _db.Set<<#= navEntityName #>>().FindAsync(key.Values.ToArray());

            if (entity == null)
                return NotFound();

            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (root == null)
                return NotFound();

            root.<#= navName #>.Add(entity);

            await _db.SaveChangesAsync();

            return Ok();
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= navName #>(<#= navKeysNameBraceComma #>)/$ref", RouteName = RouteName)]
        public async Task<IActionResult> Delete<#= navName #>Ref(<#= keysTypeNameComma #>, <#= navKeysTypeNameComma #>)
        {
            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (root == null)
                return NotFound();

            var entity = root.<#= navName #>.Where(<#= navKeysNameCondition #>).FirstOrDefault();

            if (entity == null)
                return NotFound();

            root.<#= navName #>.Remove(entity);

            await _db.SaveChangesAsync();

            return NoContent();
        }

    <#  } #>
    }
<# } #>
}