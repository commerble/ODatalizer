<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.OData.Edm" #>
<#@ import namespace="ODatalizer.EFCore.Extensions" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code is generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNet.OData;
using Microsoft.AspNet.OData.Extensions;
using Microsoft.AspNet.OData.Routing;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.OData.Edm;
using Microsoft.OData.UriParser;
using System.Linq;
using System.Threading.Tasks;

namespace <#= Namespace #>
{
<# 
    foreach(var entitySet in EdmModel.EntityContainer.EntitySets()) {
        var entitySetName = entitySet.Name;
        var keys = entitySet.EntityType().DeclaredKey;
        var controllerName = entitySetName + "Controller";
        var entityName = entitySet.EntityType().FullTypeName();
        var keysTypeNameComma = keys.Select(key => Type(key.Type) + " " + key.Name + "0").Join(", ");
        var keysNameComma = keys.Select(key => key.Name + "0").Join(", ");
        var keysNameBraceComma = keys.Select(key => "{" + key.Name + "0" + "}").Join(", ");
        var keysNameCondition = "o => " + keys.Select(key => "o." + key.Name + " == " + key.Name + "0").Join(" && ");
#>
    public partial class <#= controllerName #> : ODataController
    {
        private const string RouteName = <#= RouteNameValue #>;
        private readonly <#= DbContextTypeName #> _db;
        private readonly ILogger<<#= controllerName #>> _logger;
        public <#= controllerName #>(<#= DbContextTypeName #> db, ILogger<<#= controllerName #>> logger)
        {
            _db = db;
            _logger = logger;
        }

        [EnableQuery]
        [ODataRoute("<#= entitySetName #>", RouteName = RouteName)]
        public IActionResult Get()
        {
            return Ok(_db.<#= entitySetName #>);
        }

        [EnableQuery]
        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)", RouteName = RouteName)]
        public async Task<IActionResult> Get(<#= keysTypeNameComma #>)
        {
            var entity = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (entity == null)
                return NotFound();

            return Ok(entity);
        }

        [ODataRoute("<#= entitySetName #>", RouteName = RouteName)]
        public async Task<IActionResult> Post([FromBody]<#= entityName #> entity)
        {
            if (!ModelState.IsValid)
                return BadRequest(entity);

            _db.<#= entitySetName #>.Add(entity);

            await _db.SaveChangesAsync();
            
            return Created(entity);
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)", RouteName = RouteName)]
        public async Task<IActionResult> Put(<#= keysTypeNameComma #>, [FromBody]<#= entityName #> entity)
        {
            if (<#= keys.Select(key => key.Name + "0" + " != entity." + key.Name).Join(" || ") #>)
                return BadRequest();
        
            if (!ModelState.IsValid)
                return BadRequest(entity);

            //using var tran = _db.Database.BeginTransaction();

            var original = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (original == null)
                return NotFound();

            _db.Entry(original).State = EntityState.Detached;

            var entry = _db.Entry(entity);

            entry.State = EntityState.Modified;

            await _db.SaveChangesAsync();

            //tran.Commit();

            return NoContent();
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)", RouteName = RouteName)]
        public async Task<IActionResult> Patch(<#= keysTypeNameComma #>, [FromBody]Delta<<#= entityName #>> delta)
        {
            //using var tran = _db.Database.BeginTransaction();
            var original = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (original == null)
                return NotFound();

            delta.Patch(original);

            await _db.SaveChangesAsync();

            //tran.Commit();

            return NoContent();
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)", RouteName = RouteName)]
        public async Task<IActionResult> Delete(<#= keysTypeNameComma #>)
        {
            //using var tran = _db.Database.BeginTransaction();
         
            var entity = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);

            if (entity == null)
                return NotFound();

            _db.<#= entitySetName #>.Remove(entity);

            await _db.SaveChangesAsync();

            //tran.Commit();

            return NoContent();
        }

    <#
        var stack = new Stack<NavigationInfo>();
        
        foreach(var nav in  entitySet.NavigationPropertyBindings.Where(n => n.NavigationProperty.TargetMultiplicity() != EdmMultiplicity.Unknown))
        {
            stack.Push(new NavigationInfo { Path = new[]{ nav.NavigationProperty } });
        }

        while(stack.Count > 0) {
            var info = stack.Pop();
            if (MaxNestNavigations.HasValue == false || info.Path.Count() < MaxNestNavigations.Value) {
                var last = info.Path.Last().ToEntityType();
                foreach(var nav in last.NavigationProperties().Where(n => n.TargetMultiplicity() != EdmMultiplicity.Unknown))
                {
                    if (info.Path.Any(prop => prop.DeclaringType.IsEquivalentTo(nav.DeclaringType)) == false) {
                        stack.Push(new NavigationInfo { Path = info.Path.Concat(new[]{nav})});
                    }
                }
            }

            var segments = new List<PathSegment>();
            for (int i = 0, len = info.Path.Count(); i < len; i++)
            {
                var suffix = i + 1;
                var nav = info.Path.ElementAt(i);
                var navEntityType = nav.ToEntityType();
                var navKeys = navEntityType.DeclaredKey;

                var navEntityName = navEntityType.FullTypeName();
                var navName = nav.Name;
                var navKeysTypeNameComma = navKeys.Select(key => Type(key.Type) + " " + key.Name + suffix).Join(", ");
                var navKeysNameComma = navKeys.Select(key => key.Name + suffix).Join(", ");
                var navKeysNameBraceComma = navKeys.Select(key => "{" + key.Name + suffix + "}").Join(", ");
                var navKeysNameCondition = "o => " + navKeys.Select(key => "o." + key.Name + " == " + key.Name + suffix).Join(" && ");
                
                segments.Add(new PathSegment{
                    Suffix = suffix,
                    Name = navName,
                    Type = navEntityName,
                    Keys = navKeys,
                    KeysTypeNameComma = navKeysTypeNameComma,
                    KeysNameComma = navKeysNameComma,
                    KeysNameBraceComma = navKeysNameBraceComma,
                    KeysNameCondition = navKeysNameCondition,
                    Multiplicity = nav.TargetMultiplicity()
                });
            }
            var lastNavName = segments.Last().Name;
            var lastEntityName = segments.Last().Type;
            var methodSuffix = segments.Select(s => s.Name).Join(string.Empty);
            var routeSuffixWithoutLast = segments.Take(segments.Count-1).Select(s => s.Name + (s.Multiplicity == EdmMultiplicity.Many ? "(" + s.KeysNameBraceComma +")/" : "/")).Join(string.Empty);
            var routeSuffix = segments.Select(s => s.Name + (s.Multiplicity == EdmMultiplicity.Many ? "(" + s.KeysNameBraceComma +")" : string.Empty)).Join("/");
            var searchChainWithoutLastAndDot = segments.Take(segments.Count-1).Select(s => s.Name + (s.Multiplicity == EdmMultiplicity.Many ? ".Where(" + s.KeysNameCondition +").FirstOrDefault()" : string.Empty)).Join("?.");
            var searchChainWithoutLast = segments.Take(segments.Count-1).Select(s => s.Name + (s.Multiplicity == EdmMultiplicity.Many ? ".Where(" + s.KeysNameCondition +").FirstOrDefault()?." : "?.")).Join(string.Empty);
            var searchChain = segments.Select(s => s.Name + (s.Multiplicity == EdmMultiplicity.Many ? ".Where(" + s.KeysNameCondition +").FirstOrDefault()" : string.Empty)).Join("?.");
            var typeNameWithoutLast = segments.Take(segments.Count-1).Where(s => s.Multiplicity == EdmMultiplicity.Many).Select(s => ", " + s.KeysTypeNameComma).Join(string.Empty);
            var typeName = segments.Where(s => s.Multiplicity == EdmMultiplicity.Many).Select(s => ", " + s.KeysTypeNameComma).Join(string.Empty);
    #>
        [EnableQuery]
        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffixWithoutLast + lastNavName #>", RouteName = RouteName)]
        public async Task<IActionResult> Get<#= methodSuffix #>(<#= keysTypeNameComma #><#= typeNameWithoutLast #>)
        {
            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();
            
            return Ok(root.<#= searchChainWithoutLast + lastNavName #>);
        }

        <# if (segments.Last().Multiplicity == EdmMultiplicity.Many) { #>
        [EnableQuery]
        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffix #>", RouteName = RouteName)]
        public async Task<IActionResult> Get<#= methodSuffix #>One(<#= keysTypeNameComma #><#= typeName #>)
        {
            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();

            var entity = root.<#= searchChain #>;

            if (entity == null)
                return NotFound();

            return Ok(entity);
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffixWithoutLast + lastNavName #>", RouteName = RouteName)]
        public async Task<IActionResult> Post<#= methodSuffix #>(<#= keysTypeNameComma #><#= typeNameWithoutLast #>, [FromBody]<#= lastEntityName #> entity)
        {
            if (!ModelState.IsValid)
                return BadRequest(entity);
            
            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();
            
            root.<#= searchChainWithoutLast + lastNavName #>.Add(entity);

            await _db.SaveChangesAsync();

            return Created(entity);
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffix #>", RouteName = RouteName)]
        public async Task<IActionResult> Put<#= methodSuffix #>(<#= keysTypeNameComma #><#= typeName #>, [FromBody]<#=lastEntityName#> entity)
        {
            if (!ModelState.IsValid)
                return BadRequest(entity);
            
            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();

            var original = root.<#= searchChain #>;

            if (original == null)
                return NotFound();
            
            if (<#= segments.Last().Keys.Select(key => "original." + key.Name + " != entity." + key.Name).Join(" || ") #>)
                return BadRequest();

            _db.Entry(original).State = EntityState.Detached;

            var entry = _db.Entry(entity);

            entry.State = EntityState.Modified;

            await _db.SaveChangesAsync();

            return NoContent();
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffix #>", RouteName = RouteName)]
        public async Task<IActionResult> Patch<#= methodSuffix #>(<#= keysTypeNameComma #><#= typeName #>, [FromBody]Delta<<#=lastEntityName#>> delta)
        {
            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();

            var original = root.<#= searchChain #>;

            if (original == null)
                return NotFound();
            
            delta.Patch(original);

            await _db.SaveChangesAsync();

            return NoContent();
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffix #>", RouteName = RouteName)]
        public async Task<IActionResult> Delete<#= methodSuffix #>(<#= keysTypeNameComma #><#= typeName #>)
        {
            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();

            var entity = root.<#= searchChain #>;

            if (entity == null)
                return NotFound();

            _db.Remove(entity);

            await _db.SaveChangesAsync();

            return NoContent();
        }

        <# } else { #>

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffixWithoutLast + lastNavName #>", RouteName = RouteName)]
        public async Task<IActionResult> Post<#= methodSuffix #>(<#= keysTypeNameComma #><#= typeNameWithoutLast #>, [FromBody]<#= lastEntityName #> entity)
        {
            if (!ModelState.IsValid)
                return BadRequest(entity);

            //using var tran = _db.Database.BeginTransaction();

            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();

            var principal = root<#= segments.Count > 1 ? "." + searchChainWithoutLastAndDot : string.Empty #>;

            if (principal == null)
                return NotFound();

            if (principal.<#= lastNavName #> != null)
                return Conflict();

            principal.<#= lastNavName #> = entity;

            await _db.SaveChangesAsync();

            //tran.Commit();

            return Created(entity);
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffixWithoutLast + lastNavName #>", RouteName = RouteName)]
        public async Task<IActionResult> Put<#= methodSuffix #>(<#= keysTypeNameComma #><#= typeNameWithoutLast #>, [FromBody]<#= lastEntityName #> entity)
        {
            if (!ModelState.IsValid)
                return BadRequest(entity);

            //using var tran = _db.Database.BeginTransaction();

            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();

            var original = root.<#= searchChain #>;

            if (original == null)
                return NotFound();

            if (<#= segments.Last().Keys.Select(key => "original." + key.Name + " != entity." + key.Name).Join(" || ") #>)
                return BadRequest();

            _db.Entry(original).State = EntityState.Detached;

            var entry = _db.Entry(entity);

            entry.State = EntityState.Modified;

            await _db.SaveChangesAsync();

            //tran.Commit();

            return NoContent();
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffixWithoutLast + lastNavName #>", RouteName = RouteName)]
        public async Task<IActionResult> Patch<#= methodSuffix #>(<#= keysTypeNameComma #><#= typeNameWithoutLast #>, [FromBody]Delta<<#= lastEntityName #>> delta)
        {
            //using var tran = _db.Database.BeginTransaction();

            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();

            var original = root.<#= searchChain #>;

            if (original == null)
                return NotFound();

            delta.Patch(original);

            await _db.SaveChangesAsync();

            //tran.Commit();

            return NoContent();
        }

        [ODataRoute("<#= entitySetName #>(<#= keysNameBraceComma #>)/<#= routeSuffixWithoutLast + lastNavName #>", RouteName = RouteName)]
        public async Task<IActionResult> Delete<#= methodSuffix #>(<#= keysTypeNameComma #><#= typeNameWithoutLast #>)
        {
            //using var tran = _db.Database.BeginTransaction();

            var root = await _db.<#= entitySetName #>.FindAsync(<#= keysNameComma #>);
            
            if (root == null)
                return NotFound();

            var entity = root.<#= searchChain #>;

            if (entity == null)
                return NotFound();

            _db.Remove(entity);

            await _db.SaveChangesAsync();

            //tran.Commit();

            return NoContent();
        }
        <# } #>
    <# } #>
    }
<# } #>
}